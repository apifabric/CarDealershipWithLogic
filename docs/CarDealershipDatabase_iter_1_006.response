{
    "models": [
        {
            "classname": "Dealer",
            "code": "class Dealer(Base):\n    \"\"\"description: Represents an individual or company that sells cars.\"\"\"\n    __tablename__ = 'dealers'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String, nullable=False)\n    address = Column(String)\n    contact_number = Column(String)\n    stock_limit = Column(Integer)\n    inventory_total = Column(Integer)  # Sum of car stock inventory",
            "sqlite_create": "CREATE TABLE dealers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name STRING NOT NULL,\n    address STRING,\n    contact_number STRING,\n    stock_limit INTEGER,\n    inventory_total INTEGER\n)",
            "description": "Represents an individual or company that sells cars",
            "name": "Dealer"
        },
        {
            "classname": "Car",
            "code": "class Car(Base):\n    \"\"\"description: Represents a car available in the dealership.\"\"\"\n    __tablename__ = 'cars'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    make = Column(String, nullable=False)\n    model = Column(String, nullable=False)\n    year = Column(Integer)\n    description = Column(String)\n    dealer_id = Column(Integer, ForeignKey('dealers.id'))",
            "sqlite_create": "CREATE TABLE cars (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    make STRING NOT NULL,\n    model STRING NOT NULL,\n    year INTEGER,\n    description STRING,\n    dealer_id INTEGER,\n    FOREIGN KEY(dealer_id) REFERENCES dealers(id)\n)",
            "description": "Represents a car available in the dealership",
            "name": "Car"
        },
        {
            "classname": "Inventory",
            "code": "class Inventory(Base):\n    \"\"\"description: Contains current stock details of cars in dealership inventory.\"\"\"\n    __tablename__ = 'inventory'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    car_id = Column(Integer, ForeignKey('cars.id'))\n    stock_amount = Column(Integer, nullable=False)\n    location = Column(String)",
            "sqlite_create": "CREATE TABLE inventory (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    car_id INTEGER,\n    stock_amount INTEGER NOT NULL,\n    location STRING,\n    FOREIGN KEY(car_id) REFERENCES cars(id)\n)",
            "description": "Contains current stock details of cars in dealership inventory",
            "name": "Inventory"
        },
        {
            "classname": "Customer",
            "code": "class Customer(Base):\n    \"\"\"description: Represents a customer of the dealership.\"\"\"\n    __tablename__ = 'customers'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String, nullable=False)\n    email = Column(String)\n    phone = Column(String)\n    unpaid_sales_count = Column(Integer)  # Count of unpaid sales",
            "sqlite_create": "CREATE TABLE customers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name STRING NOT NULL,\n    email STRING,\n    phone STRING,\n    unpaid_sales_count INTEGER\n)",
            "description": "Represents a customer of the dealership",
            "name": "Customer"
        },
        {
            "classname": "Sale",
            "code": "class Sale(Base):\n    \"\"\"description: Represents a sale transaction of a car to a customer.\"\"\"\n    __tablename__ = 'sales'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    car_id = Column(Integer, ForeignKey('cars.id'))\n    customer_id = Column(Integer, ForeignKey('customers.id'))\n    sale_date = Column(DateTime, default=datetime.utcnow)\n    amount = Column(Integer, nullable=False)\n    is_paid = Column(Boolean, default=False)",
            "sqlite_create": "CREATE TABLE sales (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    car_id INTEGER,\n    customer_id INTEGER,\n    sale_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    amount INTEGER NOT NULL,\n    is_paid BOOLEAN DEFAULT 0,\n    FOREIGN KEY(car_id) REFERENCES cars(id),\n    FOREIGN KEY(customer_id) REFERENCES customers(id)\n)",
            "description": "Represents a sale transaction of a car to a customer",
            "name": "Sale"
        }
    ],
    "rules": [
        {
            "name": "Customer Unpaid Sales Count",
            "description": "Counts the number of unpaid sales associated with a customer",
            "use_case": "General",
            "entity": "Customer",
            "code": "Rule.count(derive=Customer.unpaid_sales_count, as_count_of=Sale, where=lambda row: not row.is_paid)"
        },
        {
            "name": "Dealer Inventory Total",
            "description": "Sum of car stock inventory should not exceed dealer's limits",
            "use_case": "General",
            "entity": "Dealer",
            "code": "Rule.sum(derive=Dealer.inventory_total, as_sum_of=Inventory.stock_amount)"
        },
        {
            "name": "Dealer Inventory Constraint",
            "description": "Ensure sum of stock inventory does not exceed dealer's limits",
            "use_case": "General",
            "entity": "Dealer",
            "code": "Rule.constraint(validate=Dealer, as_condition=lambda row: row.inventory_total <= row.stock_limit, error_msg=\"Dealer's inventory exceeds stock limit\")"
        }
    ],
    "test_data": "# Test data for each class instance including derivatives.",
    "test_data_rows": [
        {
            "test_data_row_variable": "dealer1",
            "code": "dealer1 = Dealer(name=\"City Auto\", address=\"123 Main St.\", contact_number=\"555-1234\", stock_limit=50)"
        },
        {
            "test_data_row_variable": "dealer2",
            "code": "dealer2 = Dealer(name=\"Town Motors\", address=\"789 Elm St.\", contact_number=\"555-6789\", stock_limit=30)"
        },
        {
            "test_data_row_variable": "dealer3",
            "code": "dealer3 = Dealer(name=\"Auto Plaza\", address=\"456 Oak St.\", contact_number=\"555-4567\", stock_limit=40)"
        },
        {
            "test_data_row_variable": "dealer4",
            "code": "dealer4 = Dealer(name=\"Village Cars\", address=\"321 Pine St.\", contact_number=\"555-9876\", stock_limit=20)"
        },
        {
            "test_data_row_variable": "sale1",
            "code": "sale1 = Sale(car_id=1, customer_id=1, sale_date=date(2021, 6, 15), amount=25000, is_paid=False)"
        },
        {
            "test_data_row_variable": "sale2",
            "code": "sale2 = Sale(car_id=2, customer_id=2, sale_date=date(2021, 7, 18), amount=22000, is_paid=True)"
        },
        {
            "test_data_row_variable": "sale3",
            "code": "sale3 = Sale(car_id=3, customer_id=3, sale_date=date(2021, 8, 21), amount=35000, is_paid=False)"
        },
        {
            "test_data_row_variable": "sale4",
            "code": "sale4 = Sale(car_id=4, customer_id=1, sale_date=date(2021, 9, 25), amount=20000, is_paid=True)"
        },
        {
            "test_data_row_variable": "inventory1",
            "code": "inventory1 = Inventory(car_id=1, stock_amount=5, location=\"Showroom A\")"
        },
        {
            "test_data_row_variable": "inventory2",
            "code": "inventory2 = Inventory(car_id=2, stock_amount=3, location=\"Showroom B\")"
        },
        {
            "test_data_row_variable": "inventory3",
            "code": "inventory3 = Inventory(car_id=3, stock_amount=2, location=\"Warehouse\")"
        },
        {
            "test_data_row_variable": "inventory4",
            "code": "inventory4 = Inventory(car_id=4, stock_amount=4, location=\"Showroom A\")"
        }
    ],
    "test_data_sqlite": "-- Sample INSERT statements for SQLite\nINSERT INTO dealers (name, address, contact_number, stock_limit) VALUES ('City Auto', '123 Main St.', '555-1234', 50);\nINSERT INTO dealers (name, address, contact_number, stock_limit) VALUES ('Town Motors', '789 Elm St.', '555-6789', 30);\nINSERT INTO dealers (name, address, contact_number, stock_limit) VALUES ('Auto Plaza', '456 Oak St.', '555-4567', 40);\nINSERT INTO dealers (name, address, contact_number, stock_limit) VALUES ('Village Cars', '321 Pine St.', '555-9876', 20);\n\nINSERT INTO sales (car_id, customer_id, sale_date, amount, is_paid) VALUES (1, 1, '2021-06-15', 25000, 0);\nINSERT INTO sales (car_id, customer_id, sale_date, amount, is_paid) VALUES (2, 2, '2021-07-18', 22000, 1);\nINSERT INTO sales (car_id, customer_id, sale_date, amount, is_paid) VALUES (3, 3, '2021-08-21', 35000, 0);\nINSERT INTO sales (car_id, customer_id, sale_date, amount, is_paid) VALUES (4, 1, '2021-09-25', 20000, 1);",
    "name": "CarDealershipWithLogic"
}